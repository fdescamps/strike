h1. The Strike Manager

If your Strike app moves beyond a bunch of static "brochure" pages then it's smart to think about how your application logic is structured. Strike includes an event system and application manager (called "StrikeMan") for this purpose: it handles the state of your application and lets you know when things are done, or need to be done: for example; when pages are transitioned, or when you need to load some data.

p(note). StrikeMan, the Strike manager, provides you with a useful structure as your application grows!

h2. Overview

There are two components to StrikeMan: the "generic events system":#Eventsystem, and the "application manager":#Manager. The application manager uses the event system for creating and responding to messages - but you are free to use it too if you like!

Also, The manager uses a very small javascript library: Base.js for implementing class-based inheritance. Base.js is packaged into Strike, so you don't need to include it (see "Dependencies":./home#Dependencies).

h2. Event system

The manager is driven by a generic event system for implementing "subscribers" and "publishers". You can use this event system to if you need to fire (publish) and catch (subscribe to) custom events. It is not necessary to use this system in your Strike applications - but it is a good tool for managing complexity.

p(note). Custom events are a great way to decouple parts of your application: for example, you might have a button called "delete item". In your JavaScript, "delete item" might call some Ajax _and_ update the page to remove the item. You could fire a custom event like "item-deleted" and have two listeners - one for updating the UI and one for doing Ajax requests. That way the Ajax code is separated from the UI code.

h3. Publishing events

All you need for your custom event is a name. This will be the identifier that your subscribers will look for. For example, if you want to fire an event when your delete button is pressed you might fire a "item-deleted" event (you can call it whatever is appropriate).

bc. delete_button.onclick = function(){
    StrikeMan.message({ eventType: 'item-deleted' });
}

Upon receiving this message, the Strike manager will pass the event to any subscribers who are listening to that message.

h3. Subscring to events

To be notified when an event occurs, you can subscribe to it. You need to use the same identifier as the publisher, and supply a callback function that will be executed when an event is received.

For our example above, we can catch when the delete button has been click, and do our delete logic:

bc. StrikeMan.observe( "item-deleted", function() { 
    alert( "item has been deleted!" );
});

h3. Adding data

Sometimes it is useful to pass some extra data along with your events. For example, you might want to store the ID of the item the user is trying to delete. You can pass a data object as another value in the event message. 

bc. StrikeMan.message({ eventType: 'my-event',
    data: {
        id: 100,
        name: "todo-item"
    } 
});

This object will then be available to any subscribers as a parameter in the callback function.

bc. StrikeMan.observe( "item-deleted", function( data ) {
    alert( "item #" + data.id + " has been deleted!" );
});


h2. Manager

bc. StrikeMan.message({
    type: 'load',
    id: "home",
    transition:'show'
});
StrikeMan.show( "home" );
StrikeMan.flip( "settings" );


bc. StrikeMan.add('widget', {
    label: 'My Widgets',
    init: function() {},
    load: function(data) {
        var linkUrl = data.link.href;
        $("#widget_shell").src = linkUrl;
        StrikeMan.message('loaded');
    },
    loaded: function(data) {}
});

h3. Aliases

Man.show => StrikeMan.event{}

h2. Setup

Can have a page with no controller, or a controller with no page - if you want.

h2. Kicking things off.

Start with
Manager.show('#page'); (or fade,flip,next) - short for ...

h2. Events

Manger uses events to 

h3. ready event

Fires after Strike.onready

h3. Load event

Fires when someone calles Manager.message('load') on the controller (or the shortcut Manager.show('id') )
You must call Manager.message('loaded') when done.

h3. Loaded event

If there was a load event on the controller, it needs to call the 
Manager.message('loaded');
when compleete.

h2. Types of managers

h2. Customising

h3. Calling parent
